=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/maindart ===
import 'package:flutter/material.dart';
import 'app/router.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      routerConfig: appRouter,
      theme: ThemeData(
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          titleTextStyle: TextStyle(color: Colors.black, fontSize: 20),
          iconTheme: IconThemeData(color: Colors.black),
        ),
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/app/routerdart ===
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../features/language/screens/language_select_screen.dart';
import '../features/profile_setup/screens/profile_setup_screen.dart';
import '../features/song_view/screens/song_view_screen.dart';

final GoRouter appRouter = GoRouter(
  routes: [
    GoRoute(
      path: '/language',
      builder: (context, state) => const LanguageSelectScreen(),
    ),
    GoRoute(
      path: '/profile',
      builder: (context, state) => const ProfileSetupScreen(),
    ),
    GoRoute(
      path: '/song-view',
      builder: (context, state) => const SongViewScreen(),
    ),
    GoRoute(
      path: '/',
      redirect: (context, state) => '/language',
    ),
  ],
);



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/language/screens/language_select_screendart ===
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';

class LanguageSelectScreen extends StatelessWidget {
  const LanguageSelectScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.close),
          onPressed: () => SystemNavigator.pop(),
        ),
        title: const Text('Odaberi jezik'),
        actions: [
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 8.0),
            child: ElevatedButton(
              onPressed: () {
                context.go('/profile');
              },
              child: const Text('SETUP MAPA I VEZA'),
            ),
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {},
              child: const Text('HRVATSKI'),
            ),
            const SizedBox(height: 12),
            ElevatedButton(
              onPressed: () {},
              child: const Text('ENGLISH'),
            ),
            const SizedBox(height: 40),
            IconButton(
              icon: const Icon(Icons.arrow_forward, size: 40),
              onPressed: () {},
            )
          ],
        ),
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/profile_setup/controllers/current_profile_loaderdart ===
import 'dart:convert';
import 'dart:io';

class CurrentProfileLoader {
  static Future<Map<String, dynamic>?> loadLastProfile() async {
    final file = File('profiles.json');
    if (!file.existsSync()) return null;

    final content = await file.readAsString();
    final profiles = List<Map<String, dynamic>>.from(jsonDecode(content));

    // Vraća zadnji spremljeni (zadnji u listi)
    if (profiles.isEmpty) return null;
    return profiles.last;
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/profile_setup/controllers/profile_controllerdart ===
import 'dart:convert';
import 'dart:io';

class ProfileController {
  static const String fileName = 'profiles.json';

  static Future<void> saveProfile({
    required String name,
    required String textFolder,
    required String mediaFolder,
    required String connection,
  }) async {
    final profile = {
      'name': name,
      'text_folder': textFolder,
      'media_folder': mediaFolder,
      'connection': connection,
    };

    final file = File(fileName);
    List profiles = [];

    if (file.existsSync()) {
      final content = file.readAsStringSync();
      profiles = jsonDecode(content);
    }

    profiles.removeWhere((p) => p['name'] == name);
    profiles.add(profile);

    await file.writeAsString(jsonEncode(profiles));
  }

  static Future<List<Map<String, dynamic>>> loadProfiles() async {
    final file = File(fileName);
    if (!file.existsSync()) return [];
    final content = await file.readAsString();
    final data = jsonDecode(content);
    return List<Map<String, dynamic>>.from(data);
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/profile_setup/screens/profile_setup_screendart ===
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:file_picker/file_picker.dart';
import '../controllers/profile_controller.dart';

class ProfileSetupScreen extends StatefulWidget {
  const ProfileSetupScreen({super.key});

  @override
  State<ProfileSetupScreen> createState() => _ProfileSetupScreenState();
}

class _ProfileSetupScreenState extends State<ProfileSetupScreen> {
  final TextEditingController _nameController = TextEditingController();
  String? _selectedTextFolder;
  String? _selectedMediaFolder;
  String? _selectedConnection;

  List<Map<String, dynamic>> _profiles = [];
  Map<String, dynamic>? _selectedProfile;

  Future<void> _loadProfiles() async {
    final loaded = await ProfileController.loadProfiles();
    setState(() {
      _profiles = loaded;
    });
  }

  @override
  void initState() {
    super.initState();
    _loadProfiles();
  }

  Future<void> _pickTextFolder() async {
    final result = await FilePicker.platform.getDirectoryPath();
    if (result != null) {
      setState(() {
        _selectedTextFolder = result;
      });
    }
  }

  Future<void> _pickMediaFolder() async {
    final result = await FilePicker.platform.getDirectoryPath();
    if (result != null) {
      setState(() {
        _selectedMediaFolder = result;
      });
    }
  }

  void _saveProfile() async {
    final name = _nameController.text.trim();
    final text = _selectedTextFolder;
    final media = _selectedMediaFolder;
    final conn = _selectedConnection;

    if (name.isEmpty || text == null || media == null || conn == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Molimo popunite sve podatke.')),
      );
      return;
    }

    await ProfileController.saveProfile(
      name: name,
      textFolder: text,
      mediaFolder: media,
      connection: conn,
    );

    await _loadProfiles();

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Profil spremljen.')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Postavljanje profila')),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Ime profila (max 7 znakova):'),
            TextField(
              controller: _nameController,
              maxLength: 7,
              decoration: const InputDecoration(hintText: 'Unesi ime'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickTextFolder,
              child: Text(_selectedTextFolder ?? 'Odaberi mapu s tekstovima'),
            ),
            const SizedBox(height: 12),
            ElevatedButton(
              onPressed: _pickMediaFolder,
              child: Text(_selectedMediaFolder ?? 'Odaberi prateću mapu'),
            ),
            const SizedBox(height: 20),
            const Text('Odaberi vezu:'),
            DropdownButton<String>(
              isExpanded: true,
              hint: const Text('Veza'),
              value: _selectedConnection,
              items: const [
                DropdownMenuItem(value: 'WiFi', child: Text('WiFi')),
                DropdownMenuItem(value: 'Hotspot', child: Text('Hotspot')),
                DropdownMenuItem(value: 'Bluetooth', child: Text('Bluetooth')),
                DropdownMenuItem(value: 'Nema', child: Text('Bez veze')),
              ],
              onChanged: (value) {
                setState(() {
                  _selectedConnection = value;
                });
              },
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _saveProfile,
              child: const Text('SPREMI PROFIL'),
            ),
            const Divider(height: 40),
            const Text('Dostupni profili:'),
            for (var p in _profiles)
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _selectedProfile = p;
                    });
                  },
                  child: Text(p['name']),
                ),
              ),
            const SizedBox(height: 20),
            if (_selectedProfile != null)
              ElevatedButton(
                onPressed: () {
                  context.go('/song-view');
                },
                child: const Text('ULAZ'),
              ),
            const Spacer(),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                IconButton(
                  icon: const Icon(Icons.arrow_back),
                  iconSize: 48,
                  onPressed: () {
                    context.go('/language');
                  },
                ),
              ],
            )
          ],
        ),
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/controllers/song_editor_controllerdart ===
import 'dart:io';

class SongEditorController {
  static Future<void> saveEditedSong(String path, String content) async {
    final file = File(path);
    await file.writeAsString(content);
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/controllers/song_settings_controllerdart ===
import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';

class SongSettingsController {
  static const String _filePath = 'settings.json';
  static Map<String, dynamic> _settings = {};

  static Future<void> loadSettings() async {
    final file = File(_filePath);
    if (file.existsSync()) {
      final content = await file.readAsString();
      _settings = jsonDecode(content);
    }
  }

  static Future<void> saveSettings() async {
    final file = File(_filePath);
    await file.writeAsString(jsonEncode(_settings));
  }

  static double getTextFontSize(String songName) {
    return _settings[songName]?['textFontSize'] ?? 18.0;
  }

  static double getChordFontSize(String songName) {
    return _settings[songName]?['chordFontSize'] ?? 20.0;
  }

  static void setTextFontSize(String songName, double size) {
    _settings[songName] ??= {};
    _settings[songName]['textFontSize'] = size;
    saveSettings();
  }

  static void setChordFontSize(String songName, double size) {
    _settings[songName] ??= {};
    _settings[songName]['chordFontSize'] = size;
    saveSettings();
  }

  static Color getTextColor(String songName) {
    final hex = _settings[songName]?['textColor'] ?? '#000000';
    return _colorFromHex(hex);
  }

  static Color getChordColor(String songName) {
    final hex = _settings[songName]?['chordColor'] ?? '#0000FF';
    return _colorFromHex(hex);
  }

  static void setTextColor(String songName, Color color) {
    _settings[songName] ??= {};
    _settings[songName]['textColor'] = _colorToHex(color);
    saveSettings();
  }

  static void setChordColor(String songName, Color color) {
    _settings[songName] ??= {};
    _settings[songName]['chordColor'] = _colorToHex(color);
    saveSettings();
  }

  static String _colorToHex(Color color) {
    return '#${color.value.toRadixString(16).padLeft(8, '0')}';
  }

  static Color _colorFromHex(String hex) {
    hex = hex.replaceAll('#', '');
    if (hex.length == 6) hex = 'ff$hex';
    return Color(int.parse(hex, radix: 16));
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/screens/song_color_settings_screendart ===
import 'package:flutter/material.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';

class SongColorSettingsScreen extends StatefulWidget {
  final Color initialTextColor;
  final Color initialChordColor;

  const SongColorSettingsScreen({
    super.key,
    required this.initialTextColor,
    required this.initialChordColor,
  });

  @override
  State<SongColorSettingsScreen> createState() => _SongColorSettingsScreenState();
}

class _SongColorSettingsScreenState extends State<SongColorSettingsScreen> {
  late Color _textColor;
  late Color _chordColor;

  @override
  void initState() {
    super.initState();
    _textColor = widget.initialTextColor;
    _chordColor = widget.initialChordColor;
  }

  Future<void> _pickColor({
    required Color currentColor,
    required ValueChanged<Color> onColorSelected,
  }) async {
    final newColor = await showDialog<Color>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Odaberi boju'),
        content: SingleChildScrollView(
          child: BlockPicker(
            pickerColor: currentColor,
            onColorChanged: onColorSelected,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(currentColor),
            child: const Text('Zatvori'),
          ),
        ],
      ),
    );

    if (newColor != null) {
      onColorSelected(newColor);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Boje prikaza')),
      body: Column(
        children: [
          ListTile(
            title: const Text('Boja teksta'),
            trailing: Container(
              width: 24,
              height: 24,
              color: _textColor,
            ),
            onTap: () => _pickColor(
              currentColor: _textColor,
              onColorSelected: (color) => setState(() => _textColor = color),
            ),
          ),
          ListTile(
            title: const Text('Boja akorda'),
            trailing: Container(
              width: 24,
              height: 24,
              color: _chordColor,
            ),
            onTap: () => _pickColor(
              currentColor: _chordColor,
              onColorSelected: (color) => setState(() => _chordColor = color),
            ),
          ),
          const Spacer(),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop({
                  'textColor': _textColor,
                  'chordColor': _chordColor,
                });
              },
              child: const Text('Spremi'),
            ),
          )
        ],
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/screens/song_edit_screendart ===
import 'package:flutter/material.dart';
import 'dart:io';
import '../controllers/song_editor_controller.dart';

class SongEditScreen extends StatefulWidget {
  final String filePath;

  const SongEditScreen({super.key, required this.filePath});

  @override
  State<SongEditScreen> createState() => _SongEditScreenState();
}

class _SongEditScreenState extends State<SongEditScreen> {
  final TextEditingController _controller = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadFile();
  }

  Future<void> _loadFile() async {
    final file = File(widget.filePath);
    if (await file.exists()) {
      _controller.text = await file.readAsString();
    }
    setState(() {});
  }

  Future<void> _save() async {
    await SongEditorController.saveEditedSong(widget.filePath, _controller.text);
    if (mounted) Navigator.pop(context, true);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Uredi tekst'),
        actions: [
          IconButton(icon: const Icon(Icons.save), onPressed: _save),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(12.0),
        child: TextField(
          controller: _controller,
          maxLines: null,
          decoration: const InputDecoration(border: OutlineInputBorder()),
        ),
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/screens/song_settings_screendart ===
import 'package:flutter/material.dart';

class SongSettingsScreen extends StatefulWidget {
  final double textFontSize;
  final double chordFontSize;
  final Color textColor;
  final Color chordColor;

  const SongSettingsScreen({
    super.key,
    required this.textFontSize,
    required this.chordFontSize,
    required this.textColor,
    required this.chordColor,
  });

  @override
  State<SongSettingsScreen> createState() => _SongSettingsScreenState();
}

class _SongSettingsScreenState extends State<SongSettingsScreen> {
  late double _textFontSize;
  late double _chordFontSize;
  late Color _textColor;
  late Color _chordColor;

  final List<Color> _colors = [
    Colors.black,
    Colors.red,
    Colors.blue,
    Colors.green,
    Colors.orange,
    Colors.purple,
    Colors.teal,
    Colors.brown,
  ];

  @override
  void initState() {
    super.initState();
    _textFontSize = widget.textFontSize;
    _chordFontSize = widget.chordFontSize;
    _textColor = widget.textColor;
    _chordColor = widget.chordColor;
  }

  Widget _buildColorPicker(String label, Color selectedColor, ValueChanged<Color> onColorSelected) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: const TextStyle(fontWeight: FontWeight.bold)),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          children: _colors.map((color) {
            return GestureDetector(
              onTap: () => setState(() => onColorSelected(color)),
              child: CircleAvatar(
                backgroundColor: color,
                radius: 16,
                child: selectedColor == color ? const Icon(Icons.check, color: Colors.white, size: 16) : null,
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Postavke prikaza')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Veličina teksta'),
            Slider(
              value: _textFontSize,
              min: 10,
              max: 40,
              divisions: 15,
              label: _textFontSize.toStringAsFixed(0),
              onChanged: (value) => setState(() => _textFontSize = value),
            ),
            const SizedBox(height: 16),
            const Text('Veličina akorda'),
            Slider(
              value: _chordFontSize,
              min: 10,
              max: 40,
              divisions: 15,
              label: _chordFontSize.toStringAsFixed(0),
              onChanged: (value) => setState(() => _chordFontSize = value),
            ),
            const SizedBox(height: 24),
            _buildColorPicker('Boja teksta', _textColor, (color) => _textColor = color),
            const SizedBox(height: 16),
            _buildColorPicker('Boja akorda', _chordColor, (color) => _chordColor = color),
            const Spacer(),
            Center(
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context, {
                    'textFontSize': _textFontSize,
                    'chordFontSize': _chordFontSize,
                    'textColor': _textColor,
                    'chordColor': _chordColor,
                  });
                },
                child: const Text('Spremi'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/screens/song_view_screendart ===
import "package:flutter/material.dart";
import "dart:io";
import "../widgets/song_controls_widget.dart";
import "../../profile_setup/controllers/current_profile_loader.dart";
import "../utils/transpose_helper.dart";
import "../utils/rich_song_parser.dart";

class SongViewScreen extends StatefulWidget {
  const SongViewScreen({super.key});

  @override
  State<SongViewScreen> createState() => _SongViewScreenState();
}

class _SongViewScreenState extends State<SongViewScreen> {
  List<String> _songLines = [];
  String? _songName;
  int _transposeSteps = 0;

  @override
  void initState() {
    super.initState();
    _loadFirstSongFromProfile();
  }

  Future<void> _loadFirstSongFromProfile() async {
    final profile = await CurrentProfileLoader.loadLastProfile();
    if (profile == null || profile['text_folder'] == null) return;

    final dir = Directory(profile['text_folder']);
    if (!dir.existsSync()) return;

    final files = dir.listSync().whereType<File>().where((f) => f.path.endsWith('.txt')).toList();
    if (files.isEmpty) return;

    final file = files.first;
    final lines = await file.readAsLines();

    setState(() {
      _songLines = lines;
      _songName = file.uri.pathSegments.last;
    });
  }

  void _transposeUp() {
    setState(() => _transposeSteps++);
  }

  void _transposeDown() {
    setState(() => _transposeSteps--);
  }

  @override
  Widget build(BuildContext context) {
    final fullText = _songLines.join('\n');
    final transposedText = fullText.split('\n').map((line) {
      return TransposeHelper.transpose(line, _transposeSteps);
    }).join('\n');

    final spans = RichSongParser.parseSong(transposedText);

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            SongControlsWidget(
              onTransposeUp: _transposeUp,
              onTransposeDown: _transposeDown,
            ),
            const Divider(),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(icon: const Icon(Icons.arrow_back), onPressed: () {}),
                  Text(_songName ?? 'Pjesma', style: const TextStyle(fontSize: 18)),
                  IconButton(icon: const Icon(Icons.arrow_forward), onPressed: () {}),
                ],
              ),
            ),
            Expanded(
              child: _songLines.isEmpty
                  ? const Center(child: Text('Nema dostupnih pjesama.'))
                  : Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: RichText(text: TextSpan(children: spans)),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/utils/rich_song_parserdart ===
import 'package:flutter/material.dart';

class RichSongParser {
  static List<TextSpan> parseSong(
    String text, {
    double textFontSize = 18,
    double chordFontSize = 20,
    Color textColor = Colors.black,
    Color chordColor = Colors.blue,
  }) {
    List<TextSpan> spans = [];
    final regex = RegExp(r'(\\(.*?\\)|\\[.*?\\])');
    final lines = text.split('\n');

    for (var line in lines) {
      final matches = regex.allMatches(line);
      int lastMatchEnd = 0;

      for (final match in matches) {
        if (match.start > lastMatchEnd) {
          final normalText = line.substring(lastMatchEnd, match.start);
          spans.add(TextSpan(
            text: normalText,
            style: TextStyle(
              color: textColor,
              fontSize: textFontSize,
              height: 1.4,
            ),
          ));
        }

        final chordText = match.group(0)!;
        spans.add(TextSpan(
          text: chordText,
          style: TextStyle(
            color: chordColor,
            fontWeight: FontWeight.bold,
            fontSize: chordFontSize,
            height: 1.4,
          ),
        ));

        lastMatchEnd = match.end;
      }

      if (lastMatchEnd < line.length) {
        final normalText = line.substring(lastMatchEnd);
        spans.add(TextSpan(
          text: normalText,
          style: TextStyle(
            color: textColor,
            fontSize: textFontSize,
            height: 1.4,
          ),
        ));
      }

      spans.add(const TextSpan(text: '\n'));
    }

    return spans;
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/utils/transpose_helperdart ===
class TransposeHelper {
  static final List<String> _notes = [
    'C', 'C#', 'D', 'D#', 'E', 'F',
    'F#', 'G', 'G#', 'A', 'A#', 'B'
  ];

  static String transpose(String line, int steps) {
    final regex = RegExp(r'\(([A-G][#b]?[^)]*)\)');
    return line.replaceAllMapped(regex, (match) {
      final full = match.group(0)!;
      final chord = match.group(1)!;
      final transposed = _transposeChord(chord, steps);
      return '($transposed)';
    });
  }

  static String _transposeChord(String chord, int steps) {
    for (final note in _notes) {
      if (chord.startsWith(note)) {
        final index = _notes.indexOf(note);
        final newIndex = (index + steps) % 12;
        final transposedNote = _notes[newIndex < 0 ? newIndex + 12 : newIndex];
        return transposedNote + chord.substring(note.length);
      }
    }
    return chord;
  }
}



=== C:/Users/Korisnik/Documents/projekti/chordsband/lib/features/song_view/widgets/song_controls_widgetdart ===
import "../screens/song_settings_screen.dart";
import "package:flutter/material.dart";

class SongControlsWidget extends StatelessWidget {
  final VoidCallback? onTransposeUp;
  final VoidCallback? onTransposeDown;

  const SongControlsWidget({
    super.key,
    this.onTransposeUp,
    this.onTransposeDown,
  });

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4),
        child: Row(
          children: [
            IconButton(icon: const Icon(Icons.search), onPressed: () {}),
            IconButton(icon: const Icon(Icons.remove), onPressed: onTransposeDown),  // Transpose -
            IconButton(icon: const Icon(Icons.add), onPressed: onTransposeUp),       // Transpose +
            IconButton(icon: const Icon(Icons.lock), onPressed: () {}),
            ElevatedButton(onPressed: () {}, child: const Text("OUT")),
            IconButton(icon: const Icon(Icons.zoom_out), onPressed: () {}),
            IconButton(icon: const Icon(Icons.zoom_in), onPressed: () {}),
            IconButton(icon: const Icon(Icons.edit), onPressed: () {}),
            IconButton(
              icon: const Icon(Icons.settings),
              onPressed: () async {
                final result = await Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => SongSettingsScreen(
                      textFontSize: 18,
                      chordFontSize: 20,
                      textColor: Colors.black,
                      chordColor: Colors.blue,
                    ),
                  ),
                );
                if (result != null) {
                  // Ovdje ćeš kasnije upisivati povratne vrijednosti
                }
              },
            ),
          ],
        ),
      ),
    );
  }
}



